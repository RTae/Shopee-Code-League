{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Sample Code - Data Science 101 - Session 3.v2 ","provenance":[{"file_id":"1xK17t_-3D3J4W1efIbsBc3eZkxxL4mUB","timestamp":1592208606872},{"file_id":"1DKr51g075Z1d6b1kDOGhAJqQnN83V8ya","timestamp":1592056386576}]},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"SfioIlYKjDQH","colab_type":"text"},"source":["One Sample z-test"]},{"cell_type":"code","metadata":{"id":"-DD7OsmejDVa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"da83dab8-311a-4175-91e8-9ad0ff3ae407","executionInfo":{"status":"ok","timestamp":1592213825187,"user_tz":-480,"elapsed":1990,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}}},"source":["from statsmodels.stats.weightstats import ztest\n","import numpy as np\n","\n","a = np.array([ 0.7972,  0.0767,  0.4383,  0.7866,  0.8091, 0.1954,  0.6307,  0.6599,  0.1065,  0.0508,0.7971,  0.0768,  0.4382,  0.7867,  0.809, 0.1955,  0.6306,  0.66,  0.1066,  0.0507,0.7973,  0.0766,  0.4384,  0.7867,  0.8092, 0.1953,  0.6308,  0.658,  0.1066,  0.0507])\n","mean = np.mean(a) #0.4550667\n","zset, pval = ztest(a, x2=None, value=0.5) \n","pval"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.4251891993849891"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"6TGTIRKskJoO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"17799ccf-0f27-4f82-a580-4c7350b35f4b","executionInfo":{"status":"ok","timestamp":1592212392932,"user_tz":-480,"elapsed":1795,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}}},"source":["if pval < 0.05:\n","    print(\"reject null hypothesis\")\n","else:\n","    print(\"do not reject null hypothesis\")"],"execution_count":2,"outputs":[{"output_type":"stream","text":["do not reject null hypothesis\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Ki2rilbfjFuj","colab_type":"text"},"source":["Two Sample z-test"]},{"cell_type":"code","metadata":{"id":"X-kzaYmFjF2p","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"6a34b383-37e7-4f5d-84ac-13c4063b7381","executionInfo":{"status":"ok","timestamp":1592212924526,"user_tz":-480,"elapsed":1214,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}}},"source":["from statsmodels.stats.weightstats import ztest\n","import numpy as np\n","\n","a = np.array([ 0.7972,  0.0767,  0.4383,  0.7866,  0.8091, 0.1954,  0.6307,  0.6599,  0.1065,  0.0508,0.7971,  0.0768,  0.4382,  0.7867,  0.809])\n","b = np.array([0.1955,  0.6306,  0.66,  0.1066,  0.0507, 0.7973,  0.0766,  0.4384,  0.7867,  0.8092, 0.1953,  0.6308,  0.658,  0.1066,  0.0507])\n","mean = np.mean(a)\n","zset, pval = ztest(a, x2=b, alternative='two-sided') \n","pval"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.45739865747943687"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"IXqA2YhHmqMa","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"23014d54-c39e-4353-91ee-eb4f92920c74","executionInfo":{"status":"ok","timestamp":1592212963638,"user_tz":-480,"elapsed":1085,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}}},"source":["if pval < 0.05:\n","    print(\"reject null hypothesis\")\n","else:\n","    print(\"do not reject null hypothesis\")"],"execution_count":6,"outputs":[{"output_type":"stream","text":["do not reject null hypothesis\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kdKulmZZpxHz","colab_type":"text"},"source":["One Sample T-Test"]},{"cell_type":"code","metadata":{"id":"ZqbZbg2bpxPr","colab_type":"code","outputId":"df3d0899-8f1c-468d-aa43-42de8e0d10f3","executionInfo":{"status":"ok","timestamp":1592213414911,"user_tz":-480,"elapsed":1111,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["from scipy.stats import ttest_1samp\n","import numpy as np\n","ages = [32,34,29,29,22,39,38,37,38,36,30,26,22,22]\n","\n","ages_mean = np.mean(ages)\n","\n","tset, pval = ttest_1samp(ages, 27)\n","pval"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.03272038491333482"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"7A7d2eRmsMrv","colab_type":"text"},"source":["One-way ANOVA Test"]},{"cell_type":"code","metadata":{"id":"H99cFY5WsM0a","colab_type":"code","outputId":"aa9f4703-3f9b-45e8-f529-9466b39cc1da","executionInfo":{"status":"ok","timestamp":1592213997507,"user_tz":-480,"elapsed":1038,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import scipy.stats as stats\n","a = [0.0571, 0.0813, 0.0831, 0.0976, 0.0817, 0.0859, 0.0735,0.0659, 0.0923, 0.0836]\n","b = [0.0873, 0.0662, 0.0672, 0.0819, 0.0749, 0.0649, 0.0835, 0.0725]\n","c = [0.0974, 0.1352, 0.0817, 0.1016, 0.0968, 0.1064, 0.105]\n","d = [0.1033, 0.0915, 0.0781, 0.0685, 0.0677, 0.0697, 0.0764, 0.0689]\n","e = [0.0703, 0.1026, 0.0956, 0.0973, 0.1039, 0.1045]\n","stats.f_oneway(a,b,c,d,e)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["F_onewayResult(statistic=7.121019471642447, pvalue=0.0002812242314534544)"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"IQHJ6wzovju2","colab_type":"text"},"source":["Chi-square Test in scipy"]},{"cell_type":"code","metadata":{"id":"4fl3Ttr-zmzC","colab_type":"code","outputId":"846167c5-98ed-43a4-c77d-501f653e8780","executionInfo":{"status":"ok","timestamp":1592214713785,"user_tz":-480,"elapsed":1075,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":225}},"source":["import pandas as pd\n","num1 = [7, 5, 6, 8]\n","num2 = [9, 6, 5, 3]\n","num3 = [5, 5, 8, 4]\n","num4 = [5, 11, 7, 10]\n","num5 = [6, 10, 7, 6]\n","num6 = [8, 3, 7, 9]\n","df = pd.DataFrame([num1,num2,num3,num4,num5,num6],columns=['set1','set2','set3','set4'], index = [1,2,3,4,5,6])\n","df"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>set1</th>\n","      <th>set2</th>\n","      <th>set3</th>\n","      <th>set4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>7</td>\n","      <td>5</td>\n","      <td>6</td>\n","      <td>8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9</td>\n","      <td>6</td>\n","      <td>5</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>8</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>11</td>\n","      <td>7</td>\n","      <td>10</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>10</td>\n","      <td>7</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8</td>\n","      <td>3</td>\n","      <td>7</td>\n","      <td>9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   set1  set2  set3  set4\n","1     7     5     6     8\n","2     9     6     5     3\n","3     5     5     8     4\n","4     5    11     7    10\n","5     6    10     7     6\n","6     8     3     7     9"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"UbLIf7dNvkCW","colab_type":"code","outputId":"addb0dbe-a615-48f3-9e91-669d4c270ec0","executionInfo":{"status":"ok","timestamp":1592215279812,"user_tz":-480,"elapsed":1154,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":118}},"source":["import numpy as np\n","from scipy.stats import chi2_contingency\n","num1 = [7, 5, 6, 8]\n","num2 = [9, 6, 5, 3]\n","num3 = [5, 5, 8, 4]\n","num4 = [5, 11, 7, 10]\n","num5 = [6, 10, 7, 6]\n","num6 = [8, 3, 7, 9]\n","dice = np.array([num1, num2, num3, num4, num5, num6])\n","\n","\n","chi2_stat, pval, dof, ex = chi2_contingency(dice)\n","pval"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(12.980872423151284, 0.6037754097071691, 15, array([[6.5 , 6.5 , 6.5 , 6.5 ],\n","        [5.75, 5.75, 5.75, 5.75],\n","        [5.5 , 5.5 , 5.5 , 5.5 ],\n","        [8.25, 8.25, 8.25, 8.25],\n","        [7.25, 7.25, 7.25, 7.25],\n","        [6.75, 6.75, 6.75, 6.75]]))"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"w4Z-biND4hDv","colab_type":"text"},"source":["Simple Linear Regression in Scipy"]},{"cell_type":"code","metadata":{"id":"ytG5KgGa4hLS","colab_type":"code","outputId":"863e2d94-c5d5-44da-d374-7eba84904143","executionInfo":{"status":"ok","timestamp":1592215941652,"user_tz":-480,"elapsed":1857,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":54}},"source":["from scipy.stats import linregress\n","height = [157, 163, 179, 173, 174, 175, 175, 168, 180, 183]\n","shoesize = [4, 7, 10, 9, 9.5, 10.5, 6, 7.5, 11, 11.5]\n","\n","linregress(height, shoesize)\n","#y = 0.259188x-36.1618"],"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["LinregressResult(slope=0.2591882947221738, intercept=-36.16181849851941, rvalue=0.8579135245156916, pvalue=0.0014967544132328656, stderr=0.05488023917355253)"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"a9JGJLbTgOI-","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":265},"outputId":"9a055c75-2825-4551-cf2c-31bcd11ce1fa","executionInfo":{"status":"ok","timestamp":1592216751769,"user_tz":-480,"elapsed":1676,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}}},"source":["import matplotlib.pyplot as plt\n","\n","plt.plot(height, shoesize, 'ro')\n","plt.show()"],"execution_count":28,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"tZzXWlbHxMGk","colab_type":"code","outputId":"9a37757c-e0f7-4f40-de83-0e05578b53de","executionInfo":{"status":"ok","timestamp":1592137437162,"user_tz":-480,"elapsed":889,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":279}},"source":["import matplotlib.pyplot as plt\n","plt.plot(height,shoesize,'o')\n","y = []\n","for i in height:\n","  y.append(0.259*i-36.1618)\n","plt.plot(height, y, 'r')\n","plt.xlabel('height')\n","plt.ylabel('shoe size')\n","plt.show()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"eJhG_1WPF_o6","colab_type":"text"},"source":["Random Sampling"]},{"cell_type":"code","metadata":{"id":"991zFsl2GBh-","colab_type":"code","outputId":"e8f722af-09a4-49d3-d5ac-516cd0f428b4","executionInfo":{"status":"ok","timestamp":1592205168558,"user_tz":-480,"elapsed":14021,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":74}},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-b8abe9cb-60d1-4d67-8cdb-7a39cb440934\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-b8abe9cb-60d1-4d67-8cdb-7a39cb440934\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving unit05-data.csv to unit05-data.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"F2B9CyMuHXyB","colab_type":"code","outputId":"91a2dab4-2b0a-472e-c740-7902aaf5014c","executionInfo":{"status":"ok","timestamp":1592110095583,"user_tz":-480,"elapsed":1169,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":168}},"source":["import pandas as pd\n","df = pd.read_csv('unit05-data.csv')\n","#extracting the column\n","df1 = df['Estimated incidence (all forms) per 100 000 population']\n","\n","print(df1.sample(100).describe())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["count     100.000000\n","mean      165.656000\n","std       223.528059\n","min         0.000000\n","25%        23.000000\n","50%        78.500000\n","75%       212.500000\n","max      1220.000000\n","Name: Estimated incidence (all forms) per 100 000 population, dtype: float64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"OOsH7R9hNnNx","colab_type":"text"},"source":["Systematic Sampling"]},{"cell_type":"code","metadata":{"id":"TvtmBsWoNpeN","colab_type":"code","colab":{}},"source":["import pandas as pd\n","df = pd.read_csv('unit05-data.csv')\n","#extracting the column\n","df1 = df['Estimated incidence (all forms) per 100 000 population']\n","\n","num = range(0,101,5)\n","print(df1.loc[num].describe())"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"__to4vVXV29s","colab_type":"text"},"source":["Stratified Sampling"]},{"cell_type":"code","metadata":{"id":"wo-NIKOkV4wX","colab_type":"code","colab":{}},"source":["import pandas as pd\n","df = pd.read_csv('unit05-data.csv')\n","\n","# y1 = df[df['year']==2000]['Estimated incidence (all forms) per 100 000 population']\n","# y2 = df[df['year']==2001]['Estimated incidence (all forms) per 100 000 population']\n","# y3 = df[df['year']==2002]['Estimated incidence (all forms) per 100 000 population']\n","# y4 = df[df['year']==2003]['Estimated incidence (all forms) per 100 000 population']\n","\n","y = []\n","for i in range(2000,2017):\n","  y.append(df[df['year']==i])\n","for i in y:\n","  print(i['Estimated incidence (all forms) per 100 000 population'].sample(10).mean())"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lQWxoBRPhpZq","colab_type":"text"},"source":["2 sample t-test"]},{"cell_type":"code","metadata":{"id":"tzO-TEEehsHB","colab_type":"code","outputId":"41e2de9b-b57c-4c78-bf88-1a6faa1c7ca9","executionInfo":{"status":"ok","timestamp":1592135122696,"user_tz":-480,"elapsed":780,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["import pandas as pd\n","from scipy import stats\n","m = [170,172,189,179,168,180,177,164,188,173]\n","f = [166,140,178,162,155,181,165,170,172,152]\n","# data = {'Males' : m, 'Females': f}\n","# df = pd.DataFrame(data)\n","# df\n","ttest, pval = stats.ttest_ind(m,f)\n","pval"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.02128547187555423"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"markdown","metadata":{"id":"rHBi0KEHbZHg","colab_type":"text"},"source":["Paired t-test"]},{"cell_type":"code","metadata":{"id":"rtR2fXJvbbxl","colab_type":"code","outputId":"5e69d322-7769-42a4-f529-eef553547dd0","executionInfo":{"status":"ok","timestamp":1592207778969,"user_tz":-480,"elapsed":17469,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"resources":{"http://localhost:8080/nbextensions/google.colab/files.js":{"data":"Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7Ci8vIE1heCBhbW91bnQgb2YgdGltZSB0byBibG9jayB3YWl0aW5nIGZvciB0aGUgdXNlci4KY29uc3QgRklMRV9DSEFOR0VfVElNRU9VVF9NUyA9IDMwICogMTAwMDsKCmZ1bmN0aW9uIF91cGxvYWRGaWxlcyhpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IHN0ZXBzID0gdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKTsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIC8vIENhY2hlIHN0ZXBzIG9uIHRoZSBvdXRwdXRFbGVtZW50IHRvIG1ha2UgaXQgYXZhaWxhYmxlIGZvciB0aGUgbmV4dCBjYWxsCiAgLy8gdG8gdXBsb2FkRmlsZXNDb250aW51ZSBmcm9tIFB5dGhvbi4KICBvdXRwdXRFbGVtZW50LnN0ZXBzID0gc3RlcHM7CgogIHJldHVybiBfdXBsb2FkRmlsZXNDb250aW51ZShvdXRwdXRJZCk7Cn0KCi8vIFRoaXMgaXMgcm91Z2hseSBhbiBhc3luYyBnZW5lcmF0b3IgKG5vdCBzdXBwb3J0ZWQgaW4gdGhlIGJyb3dzZXIgeWV0KSwKLy8gd2hlcmUgdGhlcmUgYXJlIG11bHRpcGxlIGFzeW5jaHJvbm91cyBzdGVwcyBhbmQgdGhlIFB5dGhvbiBzaWRlIGlzIGdvaW5nCi8vIHRvIHBvbGwgZm9yIGNvbXBsZXRpb24gb2YgZWFjaCBzdGVwLgovLyBUaGlzIHVzZXMgYSBQcm9taXNlIHRvIGJsb2NrIHRoZSBweXRob24gc2lkZSBvbiBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcCwKLy8gdGhlbiBwYXNzZXMgdGhlIHJlc3VsdCBvZiB0aGUgcHJldmlvdXMgc3RlcCBhcyB0aGUgaW5wdXQgdG8gdGhlIG5leHQgc3RlcC4KZnVuY3Rpb24gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpIHsKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIGNvbnN0IHN0ZXBzID0gb3V0cHV0RWxlbWVudC5zdGVwczsKCiAgY29uc3QgbmV4dCA9IHN0ZXBzLm5leHQob3V0cHV0RWxlbWVudC5sYXN0UHJvbWlzZVZhbHVlKTsKICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5leHQudmFsdWUucHJvbWlzZSkudGhlbigodmFsdWUpID0+IHsKICAgIC8vIENhY2hlIHRoZSBsYXN0IHByb21pc2UgdmFsdWUgdG8gbWFrZSBpdCBhdmFpbGFibGUgdG8gdGhlIG5leHQKICAgIC8vIHN0ZXAgb2YgdGhlIGdlbmVyYXRvci4KICAgIG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSA9IHZhbHVlOwogICAgcmV0dXJuIG5leHQudmFsdWUucmVzcG9uc2U7CiAgfSk7Cn0KCi8qKgogKiBHZW5lcmF0b3IgZnVuY3Rpb24gd2hpY2ggaXMgY2FsbGVkIGJldHdlZW4gZWFjaCBhc3luYyBzdGVwIG9mIHRoZSB1cGxvYWQKICogcHJvY2Vzcy4KICogQHBhcmFtIHtzdHJpbmd9IGlucHV0SWQgRWxlbWVudCBJRCBvZiB0aGUgaW5wdXQgZmlsZSBwaWNrZXIgZWxlbWVudC4KICogQHBhcmFtIHtzdHJpbmd9IG91dHB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIG91dHB1dCBkaXNwbGF5LgogKiBAcmV0dXJuIHshSXRlcmFibGU8IU9iamVjdD59IEl0ZXJhYmxlIG9mIG5leHQgc3RlcHMuCiAqLwpmdW5jdGlvbiogdXBsb2FkRmlsZXNTdGVwKGlucHV0SWQsIG91dHB1dElkKSB7CiAgY29uc3QgaW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaW5wdXRJZCk7CiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gZmFsc2U7CgogIGNvbnN0IG91dHB1dEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChvdXRwdXRJZCk7CiAgb3V0cHV0RWxlbWVudC5pbm5lckhUTUwgPSAnJzsKCiAgY29uc3QgcGlja2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBpbnB1dEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKGUpID0+IHsKICAgICAgcmVzb2x2ZShlLnRhcmdldC5maWxlcyk7CiAgICB9KTsKICB9KTsKCiAgY29uc3QgY2FuY2VsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7CiAgaW5wdXRFbGVtZW50LnBhcmVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2FuY2VsKTsKICBjYW5jZWwudGV4dENvbnRlbnQgPSAnQ2FuY2VsIHVwbG9hZCc7CiAgY29uc3QgY2FuY2VsUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICBjYW5jZWwub25jbGljayA9ICgpID0+IHsKICAgICAgcmVzb2x2ZShudWxsKTsKICAgIH07CiAgfSk7CgogIC8vIENhbmNlbCB1cGxvYWQgaWYgdXNlciBoYXNuJ3QgcGlja2VkIGFueXRoaW5nIGluIHRpbWVvdXQuCiAgY29uc3QgdGltZW91dFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9LCBGSUxFX0NIQU5HRV9USU1FT1VUX01TKTsKICB9KTsKCiAgLy8gV2FpdCBmb3IgdGhlIHVzZXIgdG8gcGljayB0aGUgZmlsZXMuCiAgY29uc3QgZmlsZXMgPSB5aWVsZCB7CiAgICBwcm9taXNlOiBQcm9taXNlLnJhY2UoW3BpY2tlZFByb21pc2UsIHRpbWVvdXRQcm9taXNlLCBjYW5jZWxQcm9taXNlXSksCiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdzdGFydGluZycsCiAgICB9CiAgfTsKCiAgaWYgKCFmaWxlcykgewogICAgcmV0dXJuIHsKICAgICAgcmVzcG9uc2U6IHsKICAgICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICAgIH0KICAgIH07CiAgfQoKICBjYW5jZWwucmVtb3ZlKCk7CgogIC8vIERpc2FibGUgdGhlIGlucHV0IGVsZW1lbnQgc2luY2UgZnVydGhlciBwaWNrcyBhcmUgbm90IGFsbG93ZWQuCiAgaW5wdXRFbGVtZW50LmRpc2FibGVkID0gdHJ1ZTsKCiAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zdCBsaSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7CiAgICBsaS5hcHBlbmQoc3BhbihmaWxlLm5hbWUsIHtmb250V2VpZ2h0OiAnYm9sZCd9KSk7CiAgICBsaS5hcHBlbmQoc3BhbigKICAgICAgICBgKCR7ZmlsZS50eXBlIHx8ICduL2EnfSkgLSAke2ZpbGUuc2l6ZX0gYnl0ZXMsIGAgKwogICAgICAgIGBsYXN0IG1vZGlmaWVkOiAkewogICAgICAgICAgICBmaWxlLmxhc3RNb2RpZmllZERhdGUgPyBmaWxlLmxhc3RNb2RpZmllZERhdGUudG9Mb2NhbGVEYXRlU3RyaW5nKCkgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbi9hJ30gLSBgKSk7CiAgICBjb25zdCBwZXJjZW50ID0gc3BhbignMCUgZG9uZScpOwogICAgbGkuYXBwZW5kQ2hpbGQocGVyY2VudCk7CgogICAgb3V0cHV0RWxlbWVudC5hcHBlbmRDaGlsZChsaSk7CgogICAgY29uc3QgZmlsZURhdGFQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHsKICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTsKICAgICAgcmVhZGVyLm9ubG9hZCA9IChlKSA9PiB7CiAgICAgICAgcmVzb2x2ZShlLnRhcmdldC5yZXN1bHQpOwogICAgICB9OwogICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoZmlsZSk7CiAgICB9KTsKICAgIC8vIFdhaXQgZm9yIHRoZSBkYXRhIHRvIGJlIHJlYWR5LgogICAgbGV0IGZpbGVEYXRhID0geWllbGQgewogICAgICBwcm9taXNlOiBmaWxlRGF0YVByb21pc2UsCiAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgYWN0aW9uOiAnY29udGludWUnLAogICAgICB9CiAgICB9OwoKICAgIC8vIFVzZSBhIGNodW5rZWQgc2VuZGluZyB0byBhdm9pZCBtZXNzYWdlIHNpemUgbGltaXRzLiBTZWUgYi82MjExNTY2MC4KICAgIGxldCBwb3NpdGlvbiA9IDA7CiAgICB3aGlsZSAocG9zaXRpb24gPCBmaWxlRGF0YS5ieXRlTGVuZ3RoKSB7CiAgICAgIGNvbnN0IGxlbmd0aCA9IE1hdGgubWluKGZpbGVEYXRhLmJ5dGVMZW5ndGggLSBwb3NpdGlvbiwgTUFYX1BBWUxPQURfU0laRSk7CiAgICAgIGNvbnN0IGNodW5rID0gbmV3IFVpbnQ4QXJyYXkoZmlsZURhdGEsIHBvc2l0aW9uLCBsZW5ndGgpOwogICAgICBwb3NpdGlvbiArPSBsZW5ndGg7CgogICAgICBjb25zdCBiYXNlNjQgPSBidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY2h1bmspKTsKICAgICAgeWllbGQgewogICAgICAgIHJlc3BvbnNlOiB7CiAgICAgICAgICBhY3Rpb246ICdhcHBlbmQnLAogICAgICAgICAgZmlsZTogZmlsZS5uYW1lLAogICAgICAgICAgZGF0YTogYmFzZTY0LAogICAgICAgIH0sCiAgICAgIH07CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPQogICAgICAgICAgYCR7TWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCl9JSBkb25lYDsKICAgIH0KICB9CgogIC8vIEFsbCBkb25lLgogIHlpZWxkIHsKICAgIHJlc3BvbnNlOiB7CiAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgIH0KICB9Owp9CgpzY29wZS5nb29nbGUgPSBzY29wZS5nb29nbGUgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYiA9IHNjb3BlLmdvb2dsZS5jb2xhYiB8fCB7fTsKc2NvcGUuZ29vZ2xlLmNvbGFiLl9maWxlcyA9IHsKICBfdXBsb2FkRmlsZXMsCiAgX3VwbG9hZEZpbGVzQ29udGludWUsCn07Cn0pKHNlbGYpOwo=","ok":true,"headers":[["content-type","application/javascript"]],"status":200,"status_text":""}},"base_uri":"https://localhost:8080/","height":74}},"source":["from google.colab import files\n","uploaded = files.upload()"],"execution_count":0,"outputs":[{"output_type":"display_data","data":{"text/html":["\n","     <input type=\"file\" id=\"files-e4be6862-b83c-4c65-9a3c-9e7be8e9345a\" name=\"files[]\" multiple disabled />\n","     <output id=\"result-e4be6862-b83c-4c65-9a3c-9e7be8e9345a\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script src=\"/nbextensions/google.colab/files.js\"></script> "],"text/plain":["<IPython.core.display.HTML object>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Saving blood_pressure.csv to blood_pressure.csv\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Ozqz0Rn_cl-i","colab_type":"code","outputId":"9b9fb8a4-0b8e-408f-8b9e-0df5df431c46","executionInfo":{"status":"ok","timestamp":1592207781643,"user_tz":-480,"elapsed":931,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":519}},"source":["import pandas as pd\n","df = pd.read_csv('blood_pressure.csv')\n","print(df)\n","df[['bp_before','bp_after']].describe()"],"execution_count":0,"outputs":[{"output_type":"stream","text":["     patient     sex agegrp  bp_before  bp_after\n","0          1    Male  30-45        143       153\n","1          2    Male  30-45        163       170\n","2          3    Male  30-45        153       168\n","3          4    Male  30-45        153       142\n","4          5    Male  30-45        146       141\n","..       ...     ...    ...        ...       ...\n","115      116  Female    60+        152       152\n","116      117  Female    60+        161       152\n","117      118  Female    60+        165       174\n","118      119  Female    60+        149       151\n","119      120  Female    60+        185       163\n","\n","[120 rows x 5 columns]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>bp_before</th>\n","      <th>bp_after</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>120.000000</td>\n","      <td>120.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>156.450000</td>\n","      <td>151.358333</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>11.389845</td>\n","      <td>14.177622</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>138.000000</td>\n","      <td>125.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>147.000000</td>\n","      <td>140.750000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>154.500000</td>\n","      <td>149.500000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>164.000000</td>\n","      <td>161.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>185.000000</td>\n","      <td>185.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        bp_before    bp_after\n","count  120.000000  120.000000\n","mean   156.450000  151.358333\n","std     11.389845   14.177622\n","min    138.000000  125.000000\n","25%    147.000000  140.750000\n","50%    154.500000  149.500000\n","75%    164.000000  161.000000\n","max    185.000000  185.000000"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"u3_rYxmccwV8","colab_type":"code","outputId":"e5b59252-5a28-46c8-9783-1dbc39683573","executionInfo":{"status":"ok","timestamp":1592207795883,"user_tz":-480,"elapsed":1322,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":331}},"source":["from scipy import stats\n","df1 = df[['bp_before','bp_after']]\n","df1.hist(grid = False)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7f1acd74b438>,\n","        <matplotlib.axes._subplots.AxesSubplot object at 0x7f1acd72a6a0>]],\n","      dtype=object)"]},"metadata":{"tags":[]},"execution_count":12},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"AhUPnZSG_ZhO","colab_type":"code","outputId":"48c3d16c-5fb7-43c8-e9f6-35b1892b9c7c","executionInfo":{"status":"ok","timestamp":1592207985015,"user_tz":-480,"elapsed":5682,"user":{"displayName":"Lynn Kiew","photoUrl":"","userId":"08384168801223136492"}},"colab":{"base_uri":"https://localhost:8080/","height":255}},"source":["!pip install chart_studio"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Collecting chart_studio\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/ca/ce/330794a6b6ca4b9182c38fc69dd2a9cbff60fd49421cb8648ee5fee352dc/chart_studio-1.1.0-py3-none-any.whl (64kB)\n","\r\u001b[K     |█████                           | 10kB 14.6MB/s eta 0:00:01\r\u001b[K     |██████████▏                     | 20kB 1.8MB/s eta 0:00:01\r\u001b[K     |███████████████▎                | 30kB 2.3MB/s eta 0:00:01\r\u001b[K     |████████████████████▍           | 40kB 2.6MB/s eta 0:00:01\r\u001b[K     |█████████████████████████▍      | 51kB 2.1MB/s eta 0:00:01\r\u001b[K     |██████████████████████████████▌ | 61kB 2.4MB/s eta 0:00:01\r\u001b[K     |████████████████████████████████| 71kB 2.1MB/s \n","\u001b[?25hRequirement already satisfied: plotly in /usr/local/lib/python3.6/dist-packages (from chart_studio) (4.4.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.6/dist-packages (from chart_studio) (2.23.0)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.6/dist-packages (from chart_studio) (1.3.3)\n","Requirement already satisfied: six in /usr/local/lib/python3.6/dist-packages (from chart_studio) (1.12.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests->chart_studio) (2.9)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests->chart_studio) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests->chart_studio) (2020.4.5.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests->chart_studio) (3.0.4)\n","Installing collected packages: chart-studio\n","Successfully installed chart-studio-1.1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DwC1tFAWh3x5","colab_type":"code","colab":{}},"source":["df1 = df[['bp_before','bp_after']]\n","df1.boxplot(grid = False)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZyXuvYH0lvxC","colab_type":"code","colab":{}},"source":["from scipy import stats\n","ttestm, pval = stats.ttest_rel(df['bp_before'], df['bp_after'])\n","pval"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"u01-XPBnnkww","colab_type":"code","colab":{}},"source":["if pval < 0.05:\n","    print(\"reject null hypothesis\")\n","else:\n","    print(\"do not reject null hypothesis\")"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"JS9tWC4AAoGp","colab_type":"text"},"source":["**Chart Studio**\n","(https://plotly.com/python/getting-started-with-chart-studio/#:~:text=Chart%20Studio%20provides%20a%20web,and%20you%20control%20the%20privacy."]},{"cell_type":"code","metadata":{"id":"XBjjb62K_Bm3","colab_type":"code","colab":{}},"source":["import chart_studio\n","chart_studio.tools.set_credentials_file(username='username', api_key='your_api_key')\n","import chart_studio.plotly as py\n","import plotly.graph_objects as go\n","\n","trace0 = go.Scatter(\n","    x=[1, 2, 3, 4],\n","    y=[10, 15, 13, 17]\n",")\n","trace1 = go.Scatter(\n","    x=[1, 2, 3, 4],\n","    y=[16, 5, 11, 9]\n",")\n","data = [trace0, trace1]\n","\n","#return the unique url and optionally open the url.\n","py.plot(data, filename = 'basic-line') \n","\n","#when working in a Jupyter Notebook to display the plot in the notebook.\n","py.iplot(data, filename = 'basic-line') "],"execution_count":0,"outputs":[]}]}